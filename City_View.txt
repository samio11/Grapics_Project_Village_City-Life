#include <windows.h>
#include <GL/glut.h>
#include <math.h>

float carPosX = -30.0f;  // Starting position of the car
float leafShakeOffset = 0.0f;  // Offset for leaf shaking

// Road Function
void Road() {
    glLineWidth(5);
    glColor3ub(96, 96, 96);
    glBegin(GL_POLYGON);
    glVertex2f(-30.0f, 7.0f);
    glVertex2f(0.0f, 7.0f);
    glVertex2f(30.0f, 7.0f);
    glVertex2f(30.0f, 0.0f);
    glVertex2f(30.0f, -7.0f);
    glVertex2f(0.0f, -7.0f);
    glVertex2f(-30.0f, -7.0f);
    glVertex2f(-30.0f, 0.0f);
    glEnd();

    glLineWidth(1.5);
    glColor3ub(0, 0, 0);
    glBegin(GL_LINE_LOOP);
    glVertex2f(-30.0f, 7.0f);
    glVertex2f(0.0f, 7.0f);
    glVertex2f(30.0f, 7.0f);
    glVertex2f(30.0f, 0.0f);
    glVertex2f(30.0f, -7.0f);
    glVertex2f(0.0f, -7.0f);
    glVertex2f(-30.0f, -7.0f);
    glVertex2f(-30.0f, 0.0f);
    glEnd();
}

void sky() {
    glColor3ub(25, 25, 112);
    glBegin(GL_POLYGON);
    glVertex2f(-30.0f, 10.0f);
    glVertex2f(-30.0f, 35.0f);
    glVertex2f(30.0f, 35.0f);
    glVertex2f(30.0f, 0.0f);
    glEnd();
}

void moon(float radius, float cX, float cY) {
    glBegin(GL_POLYGON);
    for(int i=0; i<200; i++) {
        glColor3ub(220, 220, 220);
        float pi = 3.1416;
        float A = (i*2*pi)/200;
        float r = radius;
        float x = r * cos(A);
        float y = r * sin(A);
        glVertex2f(x + cX, y + cY);
    }
    glEnd();
}

void cloud_circle(float radius, float cX, float cY) {
    glBegin(GL_POLYGON);
    for(int i=0; i<200; i++) {
        glColor3ub(220, 220, 220);
        float pi = 3.1416;
        float A = (i*2*pi)/200;
        float r = radius;
        float x = r * cos(A);
        float y = r * sin(A);
        glVertex2f(x + cX, y + cY);
    }
    glEnd();
}

void RoadDevider() {
    glLineWidth(5);
    glColor3ub(255, 255, 255);
    glBegin(GL_LINE_LOOP);
    glVertex2f(-30.0f, 0.0f);
    glVertex2f(0.0f, 0.0f);
    glVertex2f(30.0f, 0.0f);
    glEnd();
}

void side_walk1() {
    glColor3ub(128, 128, 128);
    glBegin(GL_POLYGON);
    glVertex2f(-30.0f, 7.0f);
    glVertex2f(-30.0f, 10.0f);
    glVertex2f(30.0f, 10.0f);
    glVertex2f(30.0f, 7.0f);
    glEnd();
    // Border
    glLineWidth(0.5);
    glColor3ub(255, 255, 255);
    glBegin(GL_LINE_LOOP);
    glVertex2f(-30.0f, 7.0f);
    glVertex2f(-30.0f, 10.0f);
    glVertex2f(30.0f, 10.0f);
    glVertex2f(30.0f, 7.0f);
    glEnd();
}

void side_walk2() {
    glColor3ub(128, 128, 128);
    glBegin(GL_POLYGON);
    glVertex2f(-30.0f, -7.0f);
    glVertex2f(-30.0f, -10.0f);
    glVertex2f(30.0f, -10.0f);
    glVertex2f(30.0f, -7.0f);
    glEnd();
    // Border
    glLineWidth(0.5);
    glColor3ub(255, 255, 255);
    glBegin(GL_LINE_LOOP);
    glVertex2f(-30.0f, -7.0f);
    glVertex2f(-30.0f, -10.0f);
    glVertex2f(30.0f, -10.0f);
    glVertex2f(30.0f, -7.0f);
    glEnd();
}

void car_wheel(float radius, float cX, float cY) {
    glBegin(GL_POLYGON);
    for (int i=0; i<200; i++) {
        glColor3ub(10, 10, 10);
        float pi = 3.1416;
        float A = (i*2*pi)/200;
        float r = radius;
        float x = r * cos(A);
        float y = r * sin(A);
        glVertex2f(x + cX, y + cY);
    }
    glEnd();
}

void car_body1() {
    glColor3ub(20, 20, 20);
    glBegin(GL_POLYGON);
    glVertex2f(-12.0f, 3.0f);
    glVertex2f(-12.0f, 5.0f);
    glVertex2f(-5.0f, 5.0f);
    glVertex2f(-5.0f, 3.0f);
    glEnd();

    glLineWidth(0.5);
    glColor3ub(1,1,1);
    glBegin(GL_LINE_LOOP);
    glVertex2f(-12.0f, 3.0f);
    glVertex2f(-12.0f, 5.0f);
    glVertex2f(-5.0f, 5.0f);
    glVertex2f(-5.0f, 3.0f);
    glEnd();
}

void car_roof1() {
    glColor3ub(25, 25, 112);
    glBegin(GL_POLYGON);
    glVertex2f(-11.0f, 5.0f);
    glVertex2f(-10.0f, 6.0f);
    glVertex2f(-7.0f, 6.0f);
    glVertex2f(-6.0f, 5.0f);
    glEnd();
    glLineWidth(0.5);
    glColor3ub(1,1,1);
    glBegin(GL_LINE_LOOP);
    glVertex2f(-11.0f, 5.0f);
    glVertex2f(-10.0f, 6.0f);
    glVertex2f(-7.0f, 6.0f);
    glVertex2f(-6.0f, 5.0f);
    glEnd();
}

void car1() {
    glPushMatrix();
    glTranslatef(carPosX, 0.0f, 0.0f);  // Move the car along the x-axis
    car_roof1();
    car_body1();
    car_wheel(0.9, -10.0, 3.0);
    car_wheel(0.9, -7.0, 3.0);
    glPopMatrix();
}

void car_roof2()
{
    glColor3ub(100, 149, 237);
    glBegin(GL_POLYGON);
    glVertex2f(4.0f, -3.0f);
    glVertex2f(5.0f, -2.0f);
    glVertex2f(8.0f,-2.0f);
    glVertex2f(9.0f, -3.0f);
    glEnd();
    glLineWidth(0.5);
    glColor3ub(1,1,1);
    glBegin(GL_LINE_LOOP);
    glVertex2f(4.0f, -3.0f);
    glVertex2f(5.0f, -2.0f);
    glVertex2f(8.0f,-2.0f);
    glVertex2f(9.0f, -3.0f);
    glEnd();
}
void car_body2()
{
    glColor3ub(255, 165, 0);
    glBegin(GL_POLYGON);
    glVertex2f(3.0f, -5.0f);
    glVertex2f(3.0f, -3.0f);
    glVertex2f(10.0f, -3.0f);
    glVertex2f(10.0f, -5.0f);
    glEnd();
    glLineWidth(0.5);
    glColor3ub(1,1,1);
    glBegin(GL_LINE_LOOP);
    glVertex2f(3.0f, -5.0f);
    glVertex2f(3.0f, -3.0f);
    glVertex2f(10.0f, -3.0f);
    glVertex2f(10.0f, -5.0f);
    glEnd();

}
void car2()
{
    car_roof2();
    car_body2();
    car_wheel(0.9,5.0, -5.0);
    car_wheel(0.9, 8.0, -5.0);
}
void lamp_body()
{
    glLineWidth(4.0);
    glColor3ub(1,1,1);
    glBegin(GL_LINE_LOOP);
    glVertex2f(-25.0f, -9.0f);
    glVertex2f(-25.0f, -4.0f);
    glEnd();
}
void lamp_light()
{

    glLineWidth(4);
    glColor3ub(1,1,1);
    glBegin(GL_LINE_LOOP);
    glVertex2f(-27.0f, -4.0f);
    glVertex2f(-23.0f, -4.0f);
    glEnd();
}

void lamp_Light(float radius, float cX, float cY) {
    glBegin(GL_POLYGON);
    for (int i=0; i<200; i++) {
        glColor3ub(255, 223, 99);
        float pi = 3.1416;
        float A = (i*2*pi)/200;
        float r = radius;
        float x = r * cos(A);
        float y = r * sin(A);
        glVertex2f(x + cX, y + cY);
    }
    glEnd();
}


void lamp_ground(float radius, float cX, float cY) {
    glBegin(GL_POLYGON);
    for (int i=0; i<200; i++) {
        glColor3ub(10, 10, 10);
        float pi = 3.1416;
        float A = (i*2*pi)/200;
        float r = radius;
        float x = r * cos(A);
        float y = r * sin(A);
        glVertex2f(x + cX, y + cY);
    }
    glEnd();
}

void lamp1()
{
    glMatrixMode(GL_MODELVIEW);
    glPushMatrix();
    glScalef(1.0,1.0,1.0);
    glTranslatef(0,0,0);

    lamp_light();
    lamp_body();
    lamp_ground(0.4,-25.0,-9.0);
    lamp_Light(1.2,-27.0f, -4.0f);
    lamp_Light(1.2,-23.0f, -4.0f);

    glPopMatrix();

}
void lamp2()
{
    glMatrixMode(GL_MODELVIEW);
    glPushMatrix();
    glScalef(1.0,1.0,1.0);
    glTranslatef(20.0,0,0);

    lamp_light();
    lamp_body();
    lamp_ground(0.4,-25.0,-9.0);
     lamp_Light(1.2,-27.0f, -4.0f);
    lamp_Light(1.2,-23.0f, -4.0f);
    glPopMatrix();
}
void lamp3()
{
    glMatrixMode(GL_MODELVIEW);
    glPushMatrix();
    glScalef(1.0,1.0,1.0);
    glTranslatef(40.0,0,0);

    lamp_light();
    lamp_body();
    lamp_ground(0.4,-25.0,-9.0);
     lamp_Light(1.2,-27.0f, -4.0f);
    lamp_Light(1.2,-23.0f, -4.0f);

    glPopMatrix();
}
void glass_building1()
{
    glColor3ub(176, 196, 222);
    glBegin(GL_POLYGON);
    glVertex2f(-25.0f, -25.0f);
    glVertex2f(-25.0f, -11.0f);
    glVertex2f(-15.0f, -11.0f);
    glVertex2f(-15.0f, -25.0f);
    glEnd();
    glLineWidth(0.5);
    glColor3ub(1,1,1);
    glBegin(GL_LINE_LOOP);
    glVertex2f(-25.0f, -25.0f);
    glVertex2f(-25.0f, -11.0f);
    glVertex2f(-15.0f, -11.0f);
    glVertex2f(-15.0f, -25.0f);
    glEnd();
    glLineWidth(0.5);
    glColor3ub(255,255,255);
    glBegin(GL_LINE_LOOP);
    glVertex2f(-20.0f, -24.0f);
    glVertex2f(-20.0f, -12.0f);
    glEnd();
    glLineWidth(0.5);
    glColor3ub(255,255,255);
    glBegin(GL_LINE_LOOP);
    glVertex2f(-24.0f, -18.0f);
    glVertex2f(-16.0f, -18.0f);
    glEnd();
}
void school()
{
    glMatrixMode(GL_MODELVIEW);
    glPushMatrix();
    glScalef(1.0,1.0,1.0);
    glTranslatef(0,0,0);
    glass_building1();
    glPopMatrix();
}
void school2()
{
    glMatrixMode(GL_MODELVIEW);
    glPushMatrix();
    glScalef(1.0,1.0,1.0);
    glTranslatef(40.0,0,0);
    glass_building1();
    glPopMatrix();
}
void renderBitmapString(float x, float y, void *font, const char *string) {
    const char *c;
    glRasterPos2f(x, y); // Set the position where the text will be rendered
    for (c = string; *c != '\0'; c++) {
        glutBitmapCharacter(font, *c); // Render each character
    }
}
void school3_signBoard()
{
    glColor3ub(211, 211, 211);
    glBegin(GL_POLYGON);
    glVertex2f(-5.0f, -17.0f);
    glVertex2f(-5.0f, -13.0f);
    glVertex2f(5.0f, -13.0f);
    glVertex2f(5.0f, -17.0f);
    glEnd();
    glLineWidth(0.5);
    glColor3ub(1,1,1);
    glBegin(GL_LINE_LOOP);
    glVertex2f(-5.0f, -17.0f);
    glVertex2f(-5.0f, -13.0f);
    glVertex2f(5.0f, -13.0f);
    glVertex2f(5.0f, -17.0f);
    glEnd();
    glColor3f(0.0, 0.0, 0.0); // Set text color to black
    renderBitmapString(-4.0f, -15.0f, GLUT_BITMAP_8_BY_13, "Samio School");
}

void school3_window()
{
      glColor3ub(255, 255, 255);
    glBegin(GL_POLYGON);
    glVertex2f(-14.0f, -18.0f);
    glVertex2f(-14.0f, -16.0f);
    glVertex2f(-12.0f, -16.0f);
    glVertex2f(-12.0f, -18.0f);
    glEnd();

     glLineWidth(0.5);
    glColor3ub(1,1,1);
    glBegin(GL_LINE_LOOP);
    glVertex2f(-14.0f, -18.0f);
    glVertex2f(-14.0f, -16.0f);
    glVertex2f(-12.0f, -16.0f);
    glVertex2f(-12.0f, -18.0f);
    glEnd();
}
void school3()
{
    glColor3ub(139, 69, 19);
    glBegin(GL_POLYGON);
    glVertex2f(-15.0f, -25.0f);
    glVertex2f(-15.0f, -15.0f);
    glVertex2f(15.0f, -15.0f);
    glVertex2f(15.0f, -25.0f);
    glEnd();
    glLineWidth(0.5);
    glColor3ub(1,1,1);
    glBegin(GL_LINE_LOOP);
    glVertex2f(-15.0f, -25.0f);
    glVertex2f(-15.0f, -15.0f);
    glVertex2f(15.0f, -15.0f);
    glVertex2f(15.0f, -25.0f);
    glEnd();
    school3_signBoard();
    //school gate
     glColor3ub(255, 255, 255);
    glBegin(GL_POLYGON);
    glVertex2f(-4.0f, -25.0f);
    glVertex2f(-4.0f, -21.0f);
    glVertex2f(4.0f, -21.0f);
    glVertex2f(4.0f, -25.0f);
    glEnd();
    glLineWidth(0.5);
    glColor3ub(1,1,1);
    glBegin(GL_LINE_LOOP);
    glVertex2f(-4.0f, -25.0f);
    glVertex2f(-4.0f, -21.0f);
    glVertex2f(4.0f, -21.0f);
    glVertex2f(4.0f, -25.0f);
    glEnd();

    //school window
    glMatrixMode(GL_MODELVIEW);
    glPushMatrix();
    glScalef(1.0,1.0,1.0);
    glTranslatef(0,0,0);
    school3_window();
    glPopMatrix();

    glMatrixMode(GL_MODELVIEW);
    glPushMatrix();
    glScalef(1.0,1.0,1.0);
    glTranslatef(0,-6.0,0);
    school3_window();
    glPopMatrix();

    glMatrixMode(GL_MODELVIEW);
    glPushMatrix();
    glScalef(1.0,1.0,1.0);
    glTranslatef(6.0,0,0);
    school3_window();
    glPopMatrix();

     glMatrixMode(GL_MODELVIEW);
    glPushMatrix();
    glScalef(1.0,1.0,1.0);
    glTranslatef(6.0,-6.0,0);
    school3_window();
    glPopMatrix();

    glMatrixMode(GL_MODELVIEW);
    glPushMatrix();
    glScalef(1.0,1.0,1.0);
    glTranslatef(21.0,0,0);
    school3_window();
    glPopMatrix();

     glMatrixMode(GL_MODELVIEW);
    glPushMatrix();
    glScalef(1.0,1.0,1.0);
    glTranslatef(21.0,-6.0,0);
    school3_window();
    glPopMatrix();

    glMatrixMode(GL_MODELVIEW);
    glPushMatrix();
    glScalef(1.0,1.0,1.0);
    glTranslatef(26.0,0,0);
    school3_window();
    glPopMatrix();

       glMatrixMode(GL_MODELVIEW);
    glPushMatrix();
    glScalef(1.0,1.0,1.0);
    glTranslatef(26.0,-6.0,0);
    school3_window();
    glPopMatrix();


}

void drawTreeCircle(float radius, float cX, float cY) {
    glBegin(GL_POLYGON);
    for (int i = 0; i < 200; i++) {
        float pi = 3.1416;
        float theta = (i * 2 * pi) / 200;
        float x = radius * cos(theta);
        float y = radius * sin(theta);
        glVertex2f(x + cX + leafShakeOffset, y + cY);  // Apply shaking offset
    }
    glEnd();
}

void tree_circle(float radius, float cX, float cY) {
    glBegin(GL_POLYGON);
    for (int i=0; i<200; i++) {
        glColor3ub(34, 139, 34);
        float pi = 3.1416;
        float A = (i*2*pi)/200;
        float r = radius;
        float x = r * cos(A);
        float y = r * sin(A);
        glVertex2f(x + cX, y + cY);
    }
    glEnd();
}

// Function to draw the tree trunk
void drawTreeTrunk(float x, float y) {
    glColor3ub(160, 82, 4);  // Brown for trunk
    glBegin(GL_POLYGON);
    glVertex2f(x - 0.5f, y);
    glVertex2f(x + 0.5f, y);
    glVertex2f(x + 0.5f, y + 3.0f);
    glVertex2f(x - 0.5f, y + 3.0f);
    glEnd();
}

// School tree 1 with shaking leaves
void school_tree_1() {
    float x = -28.0f, y = -25.0f;
    drawTreeTrunk(x, y);  // Draw the trunk
    glColor3ub(34, 139, 34);  // Green for leaves
    drawTreeCircle(1.7f, x, y + 5.0f);  // Draw first circle leaf with shake
    drawTreeCircle(1.7f, x, y + 3.0f);  // Draw second circle leaf with shake
}

// School tree 2 with shaking leaves
void school_tree_2() {
    float x = 28.0f, y = -25.0f;
    drawTreeTrunk(x, y);  // Draw the trunk
    glColor3ub(34, 139, 34);  // Green for leaves
    drawTreeCircle(1.7f, x, y + 5.0f);  // Draw first circle leaf with shake
    drawTreeCircle(1.7f, x, y + 3.0f);  // Draw second circle leaf with shake
}

void road_tree1()
{
     glLineWidth(4);
    glColor3ub(160, 82, 4);
    glBegin(GL_LINE_LOOP);
    glVertex2f(-15.0f, -9.0f);
    glVertex2f(-15.0f, -4.0f);
    glEnd();
    tree_circle(1.7,-15.0, -4.0);
    tree_circle(1.7,-15.0, -2.0);
}
void road_tree2()
{
     glLineWidth(4);
    glColor3ub(160, 82, 4);
    glBegin(GL_LINE_LOOP);
    glVertex2f(25.0f, -9.0f);
    glVertex2f(25.0f, -4.0f);
    glEnd();
    tree_circle(1.7,25.0, -4.0);
    tree_circle(1.7,25.0, -2.0);
}



// All Building Code Here
void building1()
{
    glColor3ub(238, 232, 170);
    glBegin(GL_POLYGON);
    glVertex2f(-25.0f, 10.0f);
    glVertex2f(-25.0f, 15.0f);
    glVertex2f(-15.0f, 15.0f);
    glVertex2f(-15.0f, 10.0f);
    glEnd();

    glLineWidth(0.5);
    glColor3ub(1,1,1);
    glBegin(GL_LINE_LOOP);
    glVertex2f(-25.0f, 10.0f);
    glVertex2f(-25.0f, 15.0f);
    glVertex2f(-15.0f, 15.0f);
    glVertex2f(-15.0f, 10.0f);
    glEnd();

    // Roof Top
     glColor3ub(178, 34, 34);
    glBegin(GL_POLYGON);
    glVertex2f(-25.0f, 15.0f);
    glVertex2f(-27.0f, 15.0f);
    glVertex2f(-27.0f, 17.0f);
    glVertex2f(-25.0f, 19.0f);
    glVertex2f(-15.0f, 19.0f);
    glVertex2f(-13.0f, 17.0f);
    glVertex2f(-13.0f, 15.0f);
    glVertex2f(-25.0f, 15.0f);
    glEnd();

     glLineWidth(0.5);
    glColor3ub(1,1,1);
    glBegin(GL_LINE_LOOP);
     glVertex2f(-25.0f, 15.0f);
    glVertex2f(-27.0f, 15.0f);
    glVertex2f(-27.0f, 17.0f);
    glVertex2f(-25.0f, 19.0f);
    glVertex2f(-15.0f, 19.0f);
    glVertex2f(-13.0f, 17.0f);
    glVertex2f(-13.0f, 15.0f);
    glVertex2f(-25.0f, 15.0f);
    glEnd();

    //Door
    glColor3ub(173, 216, 230);
    glBegin(GL_POLYGON);
    glVertex2f(-24.0f, 10.0f);
    glVertex2f(-24.0f, 14.0f);
    glVertex2f(-21.0f, 14.0f);
    glVertex2f(-21.0f, 10.0f);
    glEnd();

     glLineWidth(0.5);
    glColor3ub(1,1,1);
    glBegin(GL_LINE_LOOP);
     glVertex2f(-24.0f, 10.0f);
    glVertex2f(-24.0f, 14.0f);
    glVertex2f(-21.0f, 14.0f);
    glVertex2f(-21.0f, 10.0f);
    glEnd();

    //Window
    glColor3ub(255,255,255);
    glBegin(GL_POLYGON);
    glVertex2f(-19.0f, 12.0f);
    glVertex2f(-19.0f, 14.0f);
    glVertex2f(-16.0f, 14.0f);
    glVertex2f(-16.0f, 12.0f);
    glEnd();

    glLineWidth(0.5);
    glColor3ub(1,1,1);
    glBegin(GL_LINE_LOOP);
    glVertex2f(-19.0f, 12.0f);
    glVertex2f(-19.0f, 14.0f);
    glVertex2f(-16.0f, 14.0f);
    glVertex2f(-16.0f, 12.0f);
    glEnd();

}

void play_ground()
{
    glColor3ub(188, 184, 138);
    glBegin(GL_POLYGON);
    glVertex2f(-30.0f, -25.0f);
    glVertex2f(-30.0f, -10.0f);
    glVertex2f(30.0f, -10.0f);
    glVertex2f(30.0f, -25.0f);
    glEnd();
}

// House_Building
void full_build2()
{
    glColor3ub(216, 216, 216);
    glBegin(GL_POLYGON);
    glVertex2f(-5.0f, 10.0f);
    glVertex2f(-5.0f, 25.0f);
    glVertex2f(5.0f, 25.0f);
    glVertex2f(5.0f, 10.0f);
    glEnd();
}

void full_build2_border()
{
     glLineWidth(0.5);
    glColor3ub(0, 0, 0);
    glBegin(GL_LINE_LOOP);
    glVertex2f(-5.0f, 10.0f);
    glVertex2f(-5.0f, 25.0f);
    glVertex2f(5.0f, 25.0f);
    glVertex2f(5.0f, 10.0f);
    glEnd();
}

void building2_window1()
{
     glColor3ub(192, 192, 192);
     glBegin(GL_POLYGON);
     glVertex2f(-4.0f, 12.0f);
     glVertex2f(-4.0f, 14.0f);
     glVertex2f(-2.0f, 14.0f);
     glVertex2f(-2.0f, 12.0f);
     glEnd();
     glLineWidth(0.5);
     glColor3ub(0, 0, 0);
     glBegin(GL_LINE_LOOP);
     glVertex2f(-4.0f, 12.0f);
     glVertex2f(-4.0f, 14.0f);
     glVertex2f(-2.0f, 14.0f);
     glVertex2f(-2.0f, 12.0f);
     glEnd();
}
void building2_window2()
{
     glColor3ub(192, 192, 192);
     glBegin(GL_POLYGON);
     glVertex2f(2.0f, 12.0f);
     glVertex2f(2.0f, 14.0f);
     glVertex2f(4.0f, 14.0f);
     glVertex2f(4.0f, 12.0f);
     glEnd();
      glLineWidth(0.5);
     glColor3ub(0, 0, 0);
     glBegin(GL_LINE_LOOP);
     glVertex2f(2.0f, 12.0f);
     glVertex2f(2.0f, 14.0f);
     glVertex2f(4.0f, 14.0f);
     glVertex2f(4.0f, 12.0f);
     glEnd();
}
void building2_window3()
{
     glColor3ub(192, 192, 192);
     glBegin(GL_POLYGON);
     glVertex2f(-4.0f, 17.0f);
     glVertex2f(-4.0f, 19.0f);
     glVertex2f(-2.0f, 19.0f);
     glVertex2f(-2.0f, 17.0f);
     glEnd();
      glLineWidth(0.5);
     glColor3ub(0, 0, 0);
     glBegin(GL_LINE_LOOP);
    glVertex2f(-4.0f, 17.0f);
     glVertex2f(-4.0f, 19.0f);
     glVertex2f(-2.0f, 19.0f);
     glVertex2f(-2.0f, 17.0f);
     glEnd();
}
void building2_window4()
{
     glColor3ub(192, 192, 192);
     glBegin(GL_POLYGON);
     glVertex2f(2.0f, 17.0f);
     glVertex2f(2.0f, 19.0f);
     glVertex2f(4.0f, 19.0f);
     glVertex2f(4.0f, 17.0f);
     glEnd();
      glLineWidth(0.5);
     glColor3ub(0, 0, 0);
     glBegin(GL_LINE_LOOP);
    glVertex2f(2.0f, 17.0f);
     glVertex2f(2.0f, 19.0f);
     glVertex2f(4.0f, 19.0f);
     glVertex2f(4.0f, 17.0f);
     glEnd();
}
void building2_window5()
{
     glColor3ub(192, 192, 192);
     glBegin(GL_POLYGON);
     glVertex2f(-4.0f, 22.0f);
     glVertex2f(-4.0f, 24.0f);
     glVertex2f(-2.0f, 24.0f);
     glVertex2f(-2.0f, 22.0f);
     glEnd();
      glLineWidth(0.5);
     glColor3ub(0, 0, 0);
     glBegin(GL_LINE_LOOP);
    glVertex2f(-4.0f, 22.0f);
     glVertex2f(-4.0f, 24.0f);
     glVertex2f(-2.0f, 24.0f);
     glVertex2f(-2.0f, 22.0f);
     glEnd();
}
void building2_window6()
{
     glColor3ub(192, 192, 192);
     glBegin(GL_POLYGON);
     glVertex2f(2.0f, 22.0f);
     glVertex2f(2.0f, 24.0f);
     glVertex2f(4.0f, 24.0f);
     glVertex2f(4.0f, 22.0f);
     glEnd();
      glLineWidth(0.5);
     glColor3ub(0, 0, 0);
     glBegin(GL_LINE_LOOP);
   glVertex2f(2.0f, 22.0f);
     glVertex2f(2.0f, 24.0f);
     glVertex2f(4.0f, 24.0f);
     glVertex2f(4.0f, 22.0f);
     glEnd();
}
void building2_Door()
{
     glColor3ub(50, 50, 50);
     glBegin(GL_POLYGON);
     glVertex2f(-1.0f, 10.0f);
     glVertex2f(-1.0f, 12.0f);
     glVertex2f(1.0f, 12.0f);
     glVertex2f(1.0f, 10.0f);
     glEnd();
      glLineWidth(0.5);
     glColor3ub(0, 0, 0);
     glBegin(GL_LINE_LOOP);
   glVertex2f(-1.0f, 10.0f);
     glVertex2f(-1.0f, 12.0f);
     glVertex2f(1.0f, 12.0f);
     glVertex2f(1.0f, 10.0f);
     glEnd();
}


void Building2()
{
     glMatrixMode(GL_MODELVIEW);
    glPushMatrix();
    glScalef(1.0,1.0,1.0);
    glTranslatef(-5.0,0,0);
    //
   full_build2();
   full_build2_border();
   building2_window1();
   building2_window2();
   building2_window3();
   building2_window4();
   building2_window5();
   building2_window6();
   building2_Door();
    glPopMatrix();

     glMatrixMode(GL_MODELVIEW);
    glPushMatrix();
    glScalef(1.0,1.0,1.0);
    glTranslatef(8.0,0,0);
    //
   full_build2();
   full_build2_border();
   building2_window1();
   building2_window2();
   building2_window3();
   building2_window4();
   building2_window5();
   building2_window6();
   building2_Door();
    glPopMatrix();
}

void last_building()
{
     glColor3ub(245, 245, 220);
     glBegin(GL_POLYGON);
     glVertex2f(17.0f, 10.0f);
     glVertex2f(17.0f, 18.0f);
     glVertex2f(28.0f, 18.0f);
     glVertex2f(28.0f, 10.0f);
     glEnd();

      glLineWidth(0.5);
     glColor3ub(0, 0, 0);
     glBegin(GL_LINE_LOOP);
      glVertex2f(17.0f, 10.0f);
     glVertex2f(17.0f, 18.0f);
     glVertex2f(28.0f, 18.0f);
     glVertex2f(28.0f, 10.0f);
     glEnd();

     //Door
      glColor3ub(173, 216, 230);
     glBegin(GL_POLYGON);
     glVertex2f(21.0f, 10.0f);
     glVertex2f(21.0f, 14.0f);
     glVertex2f(24.0f, 14.0f);
     glVertex2f(24.0f, 10.0f);
     glEnd();

       glLineWidth(0.5);
     glColor3ub(0, 0, 0);
     glBegin(GL_LINE_LOOP);
      glVertex2f(21.0f, 10.0f);
     glVertex2f(21.0f, 14.0f);
     glVertex2f(24.0f, 14.0f);
     glVertex2f(24.0f, 10.0f);
     glEnd();
     // sign Board
       glColor3ub(211, 211, 211);
     glBegin(GL_POLYGON);
     glVertex2f(19.0f, 17.0f);
     glVertex2f(19.0f, 19.0f);
     glVertex2f(26.0f, 19.0f);
     glVertex2f(26.0f, 17.0f);
     glEnd();

       glLineWidth(0.5);
     glColor3ub(0, 0, 0);
     glBegin(GL_LINE_LOOP);
     glVertex2f(19.0f, 17.0f);
     glVertex2f(19.0f, 19.0f);
     glVertex2f(26.0f, 19.0f);
     glVertex2f(26.0f, 17.0f);
     glEnd();

     glColor3f(0.0, 0.0, 0.0); // Set text color to black
    renderBitmapString(21.0f, 17.5f, GLUT_BITMAP_8_BY_13, "Shop");

}

void cloud1()
{
    cloud_circle(1.5,-25.0,30.0);
    cloud_circle(1.5,-26.5,30.0);
    cloud_circle(1.5,-25.5,31.0);
}

void cloud2()
{
    cloud_circle(1.5,0.0,30.0);
    cloud_circle(1.5,1.5,30.0);
    cloud_circle(1.5,0.5,31.0);
}

void cloud3()
{
    cloud_circle(1.5,-15.0,30.0);
    cloud_circle(1.5,-16.5,30.0);
    cloud_circle(1.5,-15.5,31.0);
}


void display() {
    glClear(GL_COLOR_BUFFER_BIT);

    // Sky
    sky();

    //Cloud
    cloud1();
    cloud2();
    cloud3();

    //Moon
    moon(2.0,20.0,32.0);

    // Play Ground
    play_ground();

    // Road
    Road();
    RoadDevider();

    // Sidewalk
    side_walk1();
    side_walk2();

    // Car
    car1();
    car2();

    //Lamp-Post
    lamp1();
    lamp2();
    lamp3();

    //School
    school();
    school2();
    school3();

    // Tree1
    school_tree_1();
    school_tree_2();

    //Road Tree
    road_tree1();
    road_tree2();

    //All Buildings
    building1();
    Building2();
    last_building();

    glFlush();
}


void timer(int value) {
    carPosX += 0.2f;  // Move the car
    if (carPosX > 30.0f) carPosX = -30.0f;  // Reset car position

    // Animate leaf shaking using sine wave pattern
    leafShakeOffset = 0.1f * sin(value * 0.1f);

    glutPostRedisplay();  // Redraw the scene
    glutTimerFunc(1000 / 60, timer, value + 1);  // 60 FPS
}

int main(int argc, char** argv) {
    glutInit(&argc, argv);
    glutInitWindowSize(650, 650);
    glutCreateWindow("City View with Moving Car");
    glClearColor(1.0, 1.0, 1.0, 1.0);
    gluOrtho2D(-30.0, 30.0, -25.0, 35.0);
    glutDisplayFunc(display);
    glutTimerFunc(0, timer, 0);  // Start the timer for car movement
    glutMainLoop();
    return 0;
}
